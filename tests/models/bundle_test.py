#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.

import os
import io
import unittest
import json
from fhirclient.models import bundle
from fhirclient.models.fhirdate import FHIRDate
from fhirclient.models.fhirdatetime import FHIRDateTime
from fhirclient.models.fhirinstant import FHIRInstant
from fhirclient.models.fhirtime import FHIRTime


class BundleTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Bundle", js["resourceType"])
        return bundle.Bundle(js)
    
    def testBundle1(self):
        inst = self.instantiate_from("practitionerrole-examples-general.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle1(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle1(inst2)
    
    def implBundle1(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "http://hl7.org/fhir/PractitionerRole/f003-0")
        self.assertEqual(inst.entry[0].resource.id, "f003-0")
        self.assertEqual(inst.entry[1].fullUrl, "http://hl7.org/fhir/PractitionerRole/example-0")
        self.assertEqual(inst.entry[1].resource.id, "example-0")
        self.assertEqual(inst.entry[2].fullUrl, "http://hl7.org/fhir/PractitionerRole/example-1")
        self.assertEqual(inst.entry[2].resource.id, "example-1")
        self.assertEqual(inst.entry[3].fullUrl, "http://hl7.org/fhir/PractitionerRole/example-2")
        self.assertEqual(inst.entry[3].resource.id, "example-2")
        self.assertEqual(inst.entry[4].fullUrl, "http://hl7.org/fhir/PractitionerRole/f007-0")
        self.assertEqual(inst.entry[4].resource.id, "f007-0")
        self.assertEqual(inst.entry[5].fullUrl, "http://hl7.org/fhir/PractitionerRole/f004-0")
        self.assertEqual(inst.entry[5].resource.id, "f004-0")
        self.assertEqual(inst.entry[6].fullUrl, "http://hl7.org/fhir/PractitionerRole/xcda1-0")
        self.assertEqual(inst.entry[6].resource.id, "xcda1-0")
        self.assertEqual(inst.entry[7].fullUrl, "http://hl7.org/fhir/PractitionerRole/f202-0")
        self.assertEqual(inst.entry[7].resource.id, "f202-0")
        self.assertEqual(inst.entry[8].fullUrl, "http://hl7.org/fhir/PractitionerRole/f201-0")
        self.assertEqual(inst.entry[8].resource.id, "f201-0")
        self.assertEqual(inst.entry[9].fullUrl, "http://hl7.org/fhir/PractitionerRole/f203-0")
        self.assertEqual(inst.entry[9].resource.id, "f203-0")
        self.assertEqual(inst.id, "3ad0687e-f477-468c-afd5-fcc2bf897808")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "collection")
    
    def testBundle2(self):
        inst = self.instantiate_from("xds-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle2(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle2(inst2)
    
    def implBundle2(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "urn:uuid:3fdc72f4-a11d-4a9d-9260-a9f745779e1d")
        self.assertEqual(inst.entry[0].request.method, "POST")
        self.assertEqual(inst.entry[0].request.url, "DocumentReference")
        self.assertEqual(inst.entry[0].resource.meta.lastUpdated.datetime, FHIRInstant("2013-07-01T13:11:33Z").datetime)
        self.assertEqual(inst.entry[0].resource.meta.lastUpdated.as_json(), "2013-07-01T13:11:33Z")
        self.assertEqual(inst.entry[1].fullUrl, "http://localhost:9556/svc/fhir/Patient/a2")
        self.assertEqual(inst.entry[1].request.ifNoneExist, "Patient?identifier=http://acme.org/xds/patients!89765a87b")
        self.assertEqual(inst.entry[1].request.method, "POST")
        self.assertEqual(inst.entry[1].request.url, "Patient")
        self.assertEqual(inst.entry[1].resource.id, "a2")
        self.assertEqual(inst.entry[1].resource.meta.lastUpdated.datetime, FHIRInstant("2013-07-01T13:11:33Z").datetime)
        self.assertEqual(inst.entry[1].resource.meta.lastUpdated.as_json(), "2013-07-01T13:11:33Z")
        self.assertEqual(inst.entry[2].fullUrl, "http://localhost:9556/svc/fhir/Practitioner/a3")
        self.assertEqual(inst.entry[2].request.method, "POST")
        self.assertEqual(inst.entry[2].request.url, "Practitioner")
        self.assertEqual(inst.entry[2].resource.id, "a3")
        self.assertEqual(inst.entry[2].resource.meta.lastUpdated.datetime, FHIRInstant("2013-07-01T13:11:33Z").datetime)
        self.assertEqual(inst.entry[2].resource.meta.lastUpdated.as_json(), "2013-07-01T13:11:33Z")
        self.assertEqual(inst.entry[3].fullUrl, "http://localhost:9556/svc/fhir/Practitioner/a4")
        self.assertEqual(inst.entry[3].request.method, "POST")
        self.assertEqual(inst.entry[3].request.url, "Practitioner")
        self.assertEqual(inst.entry[3].resource.id, "a4")
        self.assertEqual(inst.entry[3].resource.meta.lastUpdated.datetime, FHIRInstant("2013-07-01T13:11:33Z").datetime)
        self.assertEqual(inst.entry[3].resource.meta.lastUpdated.as_json(), "2013-07-01T13:11:33Z")
        self.assertEqual(inst.entry[4].fullUrl, "http://localhost:9556/svc/fhir/Binary/1e404af3-077f-4bee-b7a6-a9be97e1ce32")
        self.assertEqual(inst.entry[4].request.method, "POST")
        self.assertEqual(inst.entry[4].request.url, "Binary")
        self.assertEqual(inst.entry[4].resource.id, "1e404af3-077f-4bee-b7a6-a9be97e1ce32")
        self.assertEqual(inst.entry[4].resource.meta.lastUpdated.datetime, FHIRInstant("2013-07-01T13:11:33Z").datetime)
        self.assertEqual(inst.entry[4].resource.meta.lastUpdated.as_json(), "2013-07-01T13:11:33Z")
        self.assertEqual(inst.id, "xds")
        self.assertEqual(inst.meta.lastUpdated.datetime, FHIRInstant("2013-07-01T13:11:33Z").datetime)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2013-07-01T13:11:33Z")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "transaction")
    
    def testBundle3(self):
        inst = self.instantiate_from("diagnosticreport-example-f001-bloodexam.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle3(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle3(inst2)
    
    def implBundle3(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "https://example.com/base/DiagnosticReport/f001")
        self.assertEqual(inst.entry[0].resource.id, "f001")
        self.assertEqual(inst.entry[1].fullUrl, "https://example.com/base/ServiceRequest/req")
        self.assertEqual(inst.entry[1].resource.id, "req")
        self.assertEqual(inst.id, "f001")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "collection")
    
    def testBundle4(self):
        inst = self.instantiate_from("diagnosticreport-example-f202-bloodculture.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle4(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle4(inst2)
    
    def implBundle4(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "https://example.com/base/DiagnosticReport/f202")
        self.assertEqual(inst.entry[0].resource.id, "f202")
        self.assertEqual(inst.entry[1].fullUrl, "https://example.com/base/ServiceRequest/req")
        self.assertEqual(inst.entry[1].resource.id, "req")
        self.assertEqual(inst.id, "f202")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "collection")
    
    def testBundle5(self):
        inst = self.instantiate_from("location-examples-general.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle5(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle5(inst2)
    
    def implBundle5(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "http://hl7.org/fhir/Location/2")
        self.assertEqual(inst.entry[0].resource.id, "2")
        self.assertEqual(inst.entry[1].fullUrl, "http://hl7.org/fhir/Location/3")
        self.assertEqual(inst.entry[1].resource.id, "3")
        self.assertEqual(inst.id, "3ad0687e-f477-468c-afd5-fcc2bf897819")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "collection")
    
    def testBundle6(self):
        inst = self.instantiate_from("questionnaire-profile-example-ussg-fht.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle6(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle6(inst2)
    
    def implBundle6(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "http://hl7.org/fhir/us/sdc/Questionnaire/54127-6")
        self.assertEqual(inst.entry[0].request.method, "PUT")
        self.assertEqual(inst.entry[0].request.url, "http://hl7.org/fhir/us/sdc/Questionnaire/54127-6")
        self.assertEqual(inst.entry[0].resource.id, "54127-6")
        self.assertEqual(inst.entry[0].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-questionnaire")
        self.assertEqual(inst.entry[1].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL1-9")
        self.assertEqual(inst.entry[1].request.method, "PUT")
        self.assertEqual(inst.entry[1].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL1-9")
        self.assertEqual(inst.entry[1].resource.id, "LL1-9")
        self.assertEqual(inst.entry[1].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[2].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL623-0")
        self.assertEqual(inst.entry[2].request.method, "PUT")
        self.assertEqual(inst.entry[2].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL623-0")
        self.assertEqual(inst.entry[2].resource.id, "LL623-0")
        self.assertEqual(inst.entry[2].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[3].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL361-7")
        self.assertEqual(inst.entry[3].request.method, "PUT")
        self.assertEqual(inst.entry[3].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL361-7")
        self.assertEqual(inst.entry[3].resource.id, "LL361-7")
        self.assertEqual(inst.entry[3].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[4].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL629-7")
        self.assertEqual(inst.entry[4].request.method, "PUT")
        self.assertEqual(inst.entry[4].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL629-7")
        self.assertEqual(inst.entry[4].resource.id, "LL629-7")
        self.assertEqual(inst.entry[4].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[5].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL628-9")
        self.assertEqual(inst.entry[5].request.method, "PUT")
        self.assertEqual(inst.entry[5].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL628-9")
        self.assertEqual(inst.entry[5].resource.id, "LL628-9")
        self.assertEqual(inst.entry[5].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[6].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL626-3")
        self.assertEqual(inst.entry[6].request.method, "PUT")
        self.assertEqual(inst.entry[6].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL626-3")
        self.assertEqual(inst.entry[6].resource.id, "LL626-3")
        self.assertEqual(inst.entry[6].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[7].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL619-8")
        self.assertEqual(inst.entry[7].request.method, "PUT")
        self.assertEqual(inst.entry[7].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL619-8")
        self.assertEqual(inst.entry[7].resource.id, "LL619-8")
        self.assertEqual(inst.entry[7].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[8].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL621-4")
        self.assertEqual(inst.entry[8].request.method, "PUT")
        self.assertEqual(inst.entry[8].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL621-4")
        self.assertEqual(inst.entry[8].resource.id, "LL621-4")
        self.assertEqual(inst.entry[8].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.entry[9].fullUrl, "http://hl7.org/fhir/us/sdc/ValueSet/LL624-8")
        self.assertEqual(inst.entry[9].request.method, "PUT")
        self.assertEqual(inst.entry[9].request.url, "http://hl7.org/fhir/us/sdc/ValueSet/LL624-8")
        self.assertEqual(inst.entry[9].resource.id, "LL624-8")
        self.assertEqual(inst.entry[9].resource.meta.profile[0], "http://hl7.org/fhir/us/sdc/StructureDefinition/sdc-valueset")
        self.assertEqual(inst.id, "ussg-fht")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "transaction")
    
    def testBundle7(self):
        inst = self.instantiate_from("diagnosticreport-hla-genetics-results-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle7(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle7(inst2)
    
    def implBundle7(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "urn:uuid:b0a4b18e-94e7-4b1b-8031-c7ae4bdd8db9")
        self.assertEqual(inst.entry[0].request.method, "POST")
        self.assertEqual(inst.entry[0].request.url, "DiagnosticReport")
        self.assertEqual(inst.entry[1].fullUrl, "urn:uuid:8200dab6-18a2-4550-b913-a7db480c0804")
        self.assertEqual(inst.entry[1].request.method, "POST")
        self.assertEqual(inst.entry[1].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[2].fullUrl, "urn:uuid:7c393185-f15c-45bc-a714-c0fdbea32675")
        self.assertEqual(inst.entry[2].request.method, "POST")
        self.assertEqual(inst.entry[2].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[3].fullUrl, "urn:uuid:65c85f14-c3a0-4b72-818f-820e04fcc621")
        self.assertEqual(inst.entry[3].request.method, "POST")
        self.assertEqual(inst.entry[3].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[4].fullUrl, "urn:uuid:fbba9fe7-0ece-4ec1-9233-a437a8d242a0")
        self.assertEqual(inst.entry[4].request.method, "POST")
        self.assertEqual(inst.entry[4].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[5].fullUrl, "urn:uuid:cbabf93e-1b4b-46f2-ba1e-d84862670670")
        self.assertEqual(inst.entry[5].request.method, "POST")
        self.assertEqual(inst.entry[5].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[6].fullUrl, "urn:uuid:c233ad3d-1572-48d6-93da-0a583535e138")
        self.assertEqual(inst.entry[6].request.method, "POST")
        self.assertEqual(inst.entry[6].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[7].fullUrl, "urn:uuid:05fa52d7-5c67-460a-8722-d3460b24d6fe")
        self.assertEqual(inst.entry[7].request.method, "POST")
        self.assertEqual(inst.entry[7].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[8].fullUrl, "urn:uuid:db69e549-6267-4777-b4b9-8813f3329309")
        self.assertEqual(inst.entry[8].request.method, "POST")
        self.assertEqual(inst.entry[8].request.url, "MolecularSequence")
        self.assertEqual(inst.entry[9].fullUrl, "urn:uuid:bb55c2bc-5ad2-4bc1-8ff3-c407d06b12d0")
        self.assertEqual(inst.entry[9].request.method, "POST")
        self.assertEqual(inst.entry[9].request.url, "MolecularSequence")
        self.assertEqual(inst.id, "hla-1")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "transaction")
    
    def testBundle8(self):
        inst = self.instantiate_from("bundle-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle8(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle8(inst2)
    
    def implBundle8(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "https://example.com/base/MedicationRequest/3123")
        self.assertEqual(inst.entry[0].resource.id, "3123")
        self.assertEqual(inst.entry[0].search.mode, "match")
        self.assertEqual(inst.entry[0].search.score, 1)
        self.assertEqual(inst.entry[1].fullUrl, "https://example.com/base/Medication/example")
        self.assertEqual(inst.entry[1].resource.id, "example")
        self.assertEqual(inst.entry[1].search.mode, "include")
        self.assertEqual(inst.id, "bundle-example")
        self.assertEqual(inst.link[0].relation, "self")
        self.assertEqual(inst.link[0].url, "https://example.com/base/MedicationRequest?patient=347&_include=MedicationRequest.medication&_count=2")
        self.assertEqual(inst.link[1].relation, "next")
        self.assertEqual(inst.link[1].url, "https://example.com/base/MedicationRequest?patient=347&searchId=ff15fd40-ff71-4b48-b366-09c706bed9d0&page=2")
        self.assertEqual(inst.meta.lastUpdated.datetime, FHIRInstant("2014-08-18T01:43:30Z").datetime)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2014-08-18T01:43:30Z")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.total, 3)
        self.assertEqual(inst.type, "searchset")
    
    def testBundle9(self):
        inst = self.instantiate_from("diagnosticreport-examples-general.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle9(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle9(inst2)
    
    def implBundle9(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "http://hl7.org/fhir/Bundle/3")
        self.assertEqual(inst.entry[0].resource.id, "3")
        self.assertEqual(inst.entry[1].fullUrl, "http://hl7.org/fhir/Bundle/4")
        self.assertEqual(inst.entry[1].resource.id, "4")
        self.assertEqual(inst.entry[2].fullUrl, "http://hl7.org/fhir/Bundle/5")
        self.assertEqual(inst.entry[2].resource.id, "5")
        self.assertEqual(inst.entry[3].fullUrl, "http://hl7.org/fhir/Bundle/6")
        self.assertEqual(inst.entry[3].resource.id, "6")
        self.assertEqual(inst.entry[4].fullUrl, "http://hl7.org/fhir/Bundle/7")
        self.assertEqual(inst.entry[4].resource.id, "7")
        self.assertEqual(inst.entry[5].fullUrl, "http://hl7.org/fhir/Bundle/8")
        self.assertEqual(inst.entry[5].resource.id, "8")
        self.assertEqual(inst.entry[6].fullUrl, "http://hl7.org/fhir/Bundle/9")
        self.assertEqual(inst.entry[6].resource.id, "9")
        self.assertEqual(inst.entry[7].fullUrl, "http://hl7.org/fhir/Bundle/15")
        self.assertEqual(inst.entry[7].resource.id, "15")
        self.assertEqual(inst.entry[8].fullUrl, "http://hl7.org/fhir/Bundle/16")
        self.assertEqual(inst.entry[8].resource.id, "16")
        self.assertEqual(inst.entry[9].fullUrl, "http://hl7.org/fhir/Bundle/17")
        self.assertEqual(inst.entry[9].resource.id, "17")
        self.assertEqual(inst.id, "72ac8493-52ac-41bd-8d5d-7258c289b5ea")
        self.assertEqual(inst.meta.lastUpdated.datetime, FHIRInstant("2012-04-14T10:35:23Z").datetime)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2012-04-14T10:35:23Z")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "collection")
    
    def testBundle10(self):
        inst = self.instantiate_from("practitioner-examples-general.json")
        self.assertIsNotNone(inst, "Must have instantiated a Bundle instance")
        self.implBundle10(inst)
        
        js = inst.as_json()
        self.assertEqual("Bundle", js["resourceType"])
        inst2 = bundle.Bundle(js)
        self.implBundle10(inst2)
    
    def implBundle10(self, inst):
        self.assertEqual(inst.entry[0].fullUrl, "http://hl7.org/fhir/Practitioner/1")
        self.assertEqual(inst.entry[0].resource.id, "1")
        self.assertEqual(inst.entry[1].fullUrl, "http://hl7.org/fhir/Practitioner/13")
        self.assertEqual(inst.entry[1].resource.id, "13")
        self.assertEqual(inst.entry[1].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[1].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[2].fullUrl, "http://hl7.org/fhir/Practitioner/14")
        self.assertEqual(inst.entry[2].resource.id, "14")
        self.assertEqual(inst.entry[2].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[2].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[3].fullUrl, "http://hl7.org/fhir/Practitioner/15")
        self.assertEqual(inst.entry[3].resource.id, "15")
        self.assertEqual(inst.entry[3].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[3].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[4].fullUrl, "http://hl7.org/fhir/Practitioner/16")
        self.assertEqual(inst.entry[4].resource.id, "16")
        self.assertEqual(inst.entry[4].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[4].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[5].fullUrl, "http://hl7.org/fhir/Practitioner/17")
        self.assertEqual(inst.entry[5].resource.id, "17")
        self.assertEqual(inst.entry[5].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[5].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[6].fullUrl, "http://hl7.org/fhir/Practitioner/18")
        self.assertEqual(inst.entry[6].resource.id, "18")
        self.assertEqual(inst.entry[6].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[6].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[7].fullUrl, "http://hl7.org/fhir/Practitioner/19")
        self.assertEqual(inst.entry[7].resource.id, "19")
        self.assertEqual(inst.entry[7].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[7].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[8].fullUrl, "http://hl7.org/fhir/Practitioner/20")
        self.assertEqual(inst.entry[8].resource.id, "20")
        self.assertEqual(inst.entry[8].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[8].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.entry[9].fullUrl, "http://hl7.org/fhir/Practitioner/21")
        self.assertEqual(inst.entry[9].resource.id, "21")
        self.assertEqual(inst.entry[9].resource.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.entry[9].resource.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.id, "3ad0687e-f477-468c-afd5-fcc2bf897809")
        self.assertEqual(inst.meta.lastUpdated.datetime, FHIRInstant("2012-05-29T23:45:32Z").datetime)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2012-05-29T23:45:32Z")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.type, "collection")

